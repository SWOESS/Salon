@model List<Salon.Models.Treatments>
@{
    ViewBag.Title = "CreatEdit";
}

<div id="treatments" class="edit">
    <h2>Behandlungen bearbeiten/erstellen</h2>
    <div class="inline-text title">
        <p>@Html.DisplayNameFor(model => model[0].Title)</p>
        <p>@Html.DisplayNameFor(model => model[0].Description)</p>
        <p>@Html.DisplayNameFor(model => model[0].isActive)</p>
        <p></p>
    </div>
    <div class="panel-group" id="accordion">
        @using (Html.BeginForm("EditTreatments", "TreatmentStepsVMs", FormMethod.Post, new {}))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            for (int i = 0; i < Model.Count() - 1; i++)
            {
            <div class="panel">
                <div class="panel-heading panel-default">
                    <div class="inline-text">
                        @Html.HiddenFor(modelItem => modelItem[i].TreatmentId)
                        <div class="form-group">
                            @Html.EditorFor(modelItem => modelItem[i].Title, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(modelItem => modelItem[i].Title, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.EditorFor(modelItem => modelItem[i].Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(modelItem => modelItem[i].Description, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.EditorFor(modelItem => modelItem[i].isActive, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(modelItem => modelItem[i].isActive, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.ActionLink("Arbeitsschritte", "CreatEditSteps", new { id = Model[i].TreatmentId }, new { @class = "steps-viewdetail btn btn-default", data_toggle = "collapse", data_target = "#collapse-" + i, data_parent = "#accordion" })
                        </div>
                    </div>
                </div>
                <div id="collapse-@i" class="panel-collapse collapse">
                    <div class="panel-body">
                    </div>
                </div>
            </div>
            }
            
            <input type="submit" value="Speichern" class="btn btn-default" name="EditTreatment" />
        }
        @*@foreach (var item in Model)
    {
        <div class="panel">
            <div class="panel-heading panel-default">
                @using (Html.BeginForm("EditTreatments", "TreatmentStepsVMs", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="inline-text">
                        @Html.HiddenFor(modelItem => item.TreatmentId)
                        <div class="form-group">
                            @Html.EditorFor(modelItem => item.Title, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(modelItem => item.Title, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.EditorFor(modelItem => item.Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(modelItem => item.Description, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.EditorFor(modelItem => item.isActive, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(modelItem => item.isActive, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.ActionLink("Arbeitsschritte", "CreatEditSteps", new { id = item.TreatmentId }, new { @class = "steps-viewdetail btn btn-default", data_toggle = "collapse", data_target = "#collapse-" + item.TreatmentId, data_parent = "#accordion" })
                            <input type="submit" value="Speichern" class="btn btn-default" name="EditTreatment" />
                        </div>
                    </div>
                }
            </div>
            <div id="collapse-@Html.DisplayFor(modelItem => item.TreatmentId)" class="panel-collapse collapse">
                <div class="panel-body">
                </div>
            </div>
        </div>
    }*@
    </div>
</div>

<div>
    @Html.ActionLink("Back to List", "Index", new { @class = "btn btn-default"})
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(function () {
        $('.steps-viewdetail').on('click', function (e) {
            $that = $(this);

            $.get($that.prop('href'), function (response) {
                $that.closest('.panel').find('.panel-body').html(response)
            });
            e.preventDefault();
        });


        $('body').on('click', '.options-viewdetail', function (e) {
            $that = $(this);

            $.get($that.prop('href'), function (response) {
                $that.closest('.panel').find('.panel-body').html(response)
            });
            e.preventDefault();
        });

        addRow();

        function addRow() {

            @*@{
                Model.Add(new Salon.Models.Treatments());
            }*@

            var index = $("#accordion .panel").length;

            var indexCell = '@Html.HiddenFor(modelItem => modelItem[0].TreatmentId)';
            var indexValidation = '@Html.ValidationMessageFor(modelItem => modelItem[0].Title, "", new { @class = "text-danger" })';
            var descriptionCell = '@Html.EditorFor(modelItem => modelItem[0].Description, new { htmlAttributes = new { @class = "form-control" } })';
            var descriptionValidation = '@Html.ValidationMessageFor(modelItem => modelItem[0].Description, "", new { @class = "text-danger" })';
            var titleCell = '@Html.EditorFor(modelItem => modelItem[0].Title, new { htmlAttributes = new { @class = "form-control" } })';
            var titleValidation = '@Html.ValidationMessageFor(modelItem => modelItem[0].Title, "", new { @class = "text-danger" })';
            indexCell = replaceString(index, '@Model[0].TreatmentId', indexCell);
            indexValidation = replaceString(index, '', indexValidation);
            descriptionCell = replaceString(index, '@Model[0].Description', descriptionCell);
            indexValidation = replaceString(index, '', descriptionValidation);
            titleCell = replaceString(index, '@Model[0].Title', titleCell);
            titleValidation = replaceString(index, '', titleValidation);

            var newRow =
                '<div class="panel">' +
                    '<div class="panel-heading panel-default">'+
                        '<div class="inline-text">' +
                            indexCell +
                            '<div class="form-group">' +
                                titleCell +
                                titleValidation +
                            '</div>' +
                            '<div class="form-group">' +
                                descriptionCell +
                                descriptionValidation +
                            '</div>' +
                        '</div>' +
                    '</div>'+
                    '<input type="submit" value="Speichern" class="btn btn-default" name="EditTreatment" />'
                '</div>'

            $("#accordion .panel:last").after(newRow);
            var ingredientIDCell = "<td style='display:none'><input name='Recipe.RecipeIngredients.RIngredientID'type='hidden' value='" + index + "' /></td>";
            var nameCell = "<td><div class='form-group'><div class='col-md-10'><input class='form-control text-box single-line' id='Recipe_RecipeIngredients_" + index + "__Title'name='Recipe.RecipeIngredients[" + index + "].RIngredientName' type='text' value='' data-val='true' data-val-required='The Ingredient field is required.' /></div></div></td>";
            var amountCell = "<td><div class='form-group'><div class='col-md-10'><input class='form-control text-box single-line' id='Recipe_RecipeIngredients_" + index + "__Title'name='Recipe.RecipeIngredients[" + index + "].Amount' type='number' value='' data-val='true' data-val-number='The field Amount must be a number.' data-val-required='The Amount field is required.'/></div></div></td>";
            var unitCell = "<td><div class='form-group'><div class='col-md-10'><select id='Recipe_RecipeIngredients_" + index + "__UnitID'name='Recipe.RecipeIngredients[" + index + "].UnitID' value=''/></select></div></div></td>";

            var removeCell = "<td style='padding-left:20px;'><input id='btnAddBook' type='button'"
            + "value='Entfernen' onclick='removeRow(" + index + ");' class='btn btn-primary'/></td>";

            var newRow = "<tr id='trBook" + index + "'>" + indexCell + ingredientIDCell + nameCell + amountCell + unitCell + removeCell + "</tr>";

            @*$("#tbBooks").append(newRow);
            $("#Recipe_RecipeIngredients_" + index + "__UnitID").append(@(new HtmlString('"' + units + '"')))*@;
        }
        function removeRow(id) {
            var controlToBeRemoved = "#trBook" + id;
            var Ingredient = "#IngredientID" + id;
            var IngredientID = $(Ingredient).val();
            var IngredientIDs = $('#hiddenIngredientIDs').val();
            $("#hiddenIngredientIDs").val(IngredientIDs + "," + IngredientID);
            $(controlToBeRemoved).remove();
        }

        function replaceString(index, model, string) {
            newString = string.replace("[0]", "[" + index + "]").replace('value="' + model, 'value="');
            return newString;
        }
    });
    </script>
}