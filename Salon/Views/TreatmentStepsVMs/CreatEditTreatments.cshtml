@model List<Salon.Models.Treatments>
@{
    ViewBag.Title = "CreatEdit";
}

<div id="treatments" class="edit">
    <h2>Behandlungen bearbeiten/erstellen</h2>
    <div class="inline-text title">
        <p>@Html.DisplayNameFor(model => model[0].Title)</p>
        <p>@Html.DisplayNameFor(model => model[0].Description)</p>
        <p>@Html.DisplayNameFor(model => model[0].isActive)</p>
        <p></p>
    </div>
    <div class="panel-group" id="accordion">
        @using (Html.BeginForm("EditTreatments", "TreatmentStepsVMs", FormMethod.Post, new {}))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            for (int i = 0; i < Model.Count() - 1; i++)
            {
            <div class="panel">
                <div class="panel-heading panel-default">
                    <div class="inline-text">
                        @Html.HiddenFor(modelItem => modelItem[i].TreatmentId)
                        <div class="form-group">
                            @Html.EditorFor(modelItem => modelItem[i].Title, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(modelItem => modelItem[i].Title, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.EditorFor(modelItem => modelItem[i].Description, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(modelItem => modelItem[i].Description, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.EditorFor(modelItem => modelItem[i].isActive, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(modelItem => modelItem[i].isActive, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group">
                            @Html.ActionLink("Arbeitsschritte", "CreatEditSteps", new { id = Model[i].TreatmentId }, new { @class = "steps-viewdetail btn btn-default", data_toggle = "collapse", data_target = "#collapse-" + i, data_parent = "#accordion" })
                        </div>
                    </div>
                </div>
                <div id="collapse-@i" class="panel-collapse collapse">
                    <div class="panel-body">
                    </div>
                </div>
            </div>
            }
            <div class="special">
                <input id="CreateTreatment" type="button" onclick="addRow();" value="Behandlung hinzufügen" class="btn btn-default" />
                <input type="submit" value="Speichern" class="btn btn-default" name="EditTreatment" />
            </div>
        }
    </div>
</div>

<div class="">
    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default" })
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
    $(function () {
        $('.steps-viewdetail').on('click', function (e) {
            $that = $(this);

            $.get($that.prop('href'), function (response) {
                $that.closest('.panel').find('.panel-body').html(response)
            });
            e.preventDefault();
        });


        $('body').on('click', '.options-viewdetail', function (e) {
            $that = $(this);

            $.get($that.prop('href'), function (response) {
                $that.closest('.panel').find('.panel-body').html(response)
            });
            e.preventDefault();
        });

    });
    function addRow() {

        @{
            Model.Add(new Salon.Models.Treatments());
        }

        var index = $("#accordion .panel").length;

        var indexCell = '@Html.HiddenFor(modelItem => modelItem[0].TreatmentId)';
        var indexValidation = '@Html.ValidationMessageFor(modelItem => modelItem[0].Title, "", new { @class = "text-danger" })';
        var descriptionCell = '@Html.EditorFor(modelItem => modelItem[0].Description, new { htmlAttributes = new { @class = "form-control" } })';
        var descriptionValidation = '@Html.ValidationMessageFor(modelItem => modelItem[0].Description, "", new { @class = "text-danger" })';
        var titleCell = '@Html.EditorFor(modelItem => modelItem[0].Title, new { htmlAttributes = new { @class = "form-control" } })';
        var titleValidation = '@Html.ValidationMessageFor(modelItem => modelItem[0].Title, "", new { @class = "text-danger" })';
        var isActiveCell = '@Html.EditorFor(modelItem => modelItem[0].isActive, new { htmlAttributes = new { @class = "form-control" } })';
        var isActiveValidation = '@Html.ValidationMessageFor(modelItem => modelItem[0].isActive, "", new { @class = "text-danger" })';
        indexCell = replaceStringID(index, '@Model[0].TreatmentId', indexCell);
        indexValidation = replaceString(index, '', indexValidation);
        descriptionCell = replaceString(index, '@Model[0].Description', descriptionCell);
        descriptionValidation = replaceString(index, '', descriptionValidation);
        titleCell = replaceString(index, '@Model[0].Title', titleCell);
        titleValidation = replaceString(index, '', titleValidation);
        isActiveCell = replaceString(index, '@Model[0].isActive', isActiveCell);
        isActiveValidation = replaceString(index, '', isActiveValidation);

        var newRow =
            '<div class="panel">' +
                '<div class="panel-heading panel-default">'+
                    '<div class="inline-text">' +
                        indexCell +
                        '<div class="form-group">' +
                            titleCell +
                            titleValidation +
                        '</div>' +
                        '<div class="form-group">' +
                            descriptionCell +
                            descriptionValidation +
                        '</div>' +
                        '<div class="form-group">' +
                            isActiveCell +
                            isActiveValidation +
                        '</div>' +
                        '<div class="form-group"></div>' +
                    '</div>' +
                '</div>'+
            '</div>'

        $("#accordion .panel:last").after(newRow);
    }
    function removeRow(id) {
        var controlToBeRemoved = "#trBook" + id;
        var Ingredient = "#IngredientID" + id;
        var IngredientID = $(Ingredient).val();
        var IngredientIDs = $('#hiddenIngredientIDs').val();
        $("#hiddenIngredientIDs").val(IngredientIDs + "," + IngredientID);
        $(controlToBeRemoved).remove();
    }

    function replaceString(index, model, string) {
        newString = string.replace("[0]", "[" + index + "]").replace('value="' + model, 'value="');
        return newString;
    }
    function replaceStringID(index, model, string) {
        newString = string.replace("[0]", "[" + index + "]").replace('value="' + model, 'value="0');
        return newString;
    }
    </script>
}