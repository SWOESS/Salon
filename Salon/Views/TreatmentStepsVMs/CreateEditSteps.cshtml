@model  List<Salon.Models.StepsVM>

@{
    ViewBag.Title = "Arbeitsschritte und Optionen bearbeiten/erstellen";
}

<div id="treatments" class="edit">
    @{Html.RenderAction("ShowTreatment", "TreatmentStepsVMs", new { id = Model[0].TreatmentId});}
    <h2>Arbeitsschritte und Optionen bearbeiten/erstellen</h2>
    <div class="inline-text title">

        <p>@Html.DisplayNameFor(model => model[0].Title)</p>
        <p>@Html.DisplayNameFor(model => model[0].Description)</p>
        <p>@Html.DisplayNameFor(model => model[0].isSensitive)</p>
        <p>@Html.DisplayNameFor(model => model[0].isActive)</p>
        <p>@Html.DisplayNameFor(model => model[0].Duration)</p>
        <p>@Html.DisplayNameFor(model => model[0].Order)</p>

    </div>

    <div class="panel-group" id="accordion">
        @using (Html.BeginForm("EditTreatments", "TreatmentStepsVMs", FormMethod.Post, new { }))
        {
            @Html.AntiForgeryToken()
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            for (int i = 0; i < Model.Count; i++)
            {
                <div class="panel">
                    <div class="panel-heading panel-default">
                        <div class="inline-text">
                            @Html.HiddenFor(modelItem => modelItem[i].TreatmentId)
                            @Html.HiddenFor(modelItem => modelItem[i].StepsId)
                            <div class="form-group">
                                @Html.EditorFor(modelItem => modelItem[i].Title, new { htmlAttributes = new { @class = "form-control"} })
                                @Html.ValidationMessageFor(modelItem => modelItem[i].Title, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.EditorFor(modelItem => modelItem[i].Description, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(modelItem => modelItem[i].Description, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.EditorFor(modelItem => modelItem[i].isSensitive, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(modelItem => modelItem[i].isSensitive, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.EditorFor(modelItem => modelItem[i].isActive, new { htmlAttributes = new { @class = "form-control"} })
                                @Html.ValidationMessageFor(modelItem => modelItem[i].isActive, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.EditorFor(modelItem => modelItem[i].Duration, new { htmlAttributes = new { @class = "form-control"} })
                                @Html.ValidationMessageFor(modelItem => modelItem[i].Duration, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.EditorFor(modelItem => modelItem[i].Order, new { htmlAttributes = new { @class = "form-control"} })
                                @Html.ValidationMessageFor(modelItem => modelItem[i].Order, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
                }
            }
    </div>
</div>