@model IEnumerable<Salon.Views.ViewModels.WorkPerClassViewModel>
<link href="~/Content/bootstrap.css" rel="stylesheet" type="text/css" media="screen" runat="server" />

@{
    Layout = null;
}

<!DOCTYPE html>

<html>
<body>
    <div id="ajaxContent"> 
        @if (Model.FirstOrDefault() != null)
        {
            <table class="table">
                <thead>
                    <tr style="font-size: 16px; cursor: pointer">
                        <th class="sortable">
                            @Html.DisplayNameFor(model => model.StudentName) &#x21c5
                        </th>
                        <th>
                            @Html.DisplayNameFor(model => model.Class)
                        </th>
                        <th class="sortable">
                            @Html.DisplayNameFor(model => model.TeacherName) &#x21c5
                        </th>
                        <th class="sortable">
                            @Html.DisplayNameFor(model => model.Date) &#x21c5
                        </th>
                        <th class="sortable">
                            @Html.DisplayNameFor(model => model.Treatment) &#x21c5
                        </th>
                        <th>
                            Schritt
                        </th>
                        <th>
                            Schrittbeschreibung
                        </th>
                    </tr>
                </thead>
                <tbody style="overflow: auto; max-height: 80%">
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.StudentName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Class)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.TeacherName)
                            </td>
                            <td>
                                @*@Html.DisplayFor(modelItem => item.Date)*@
                                @Convert.ToString(string.Format("{0:dd.MM.yyyy}", item.Date))
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Treatment)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <h3>Für diese Klasse ist kein Datensatz vorhanden!</h3>
        }
    </div>
</body>
</html>

<script>
    $(document).ready(function () {

        //grab all header rows
        $('th').each(function (column) {
            $(this).addClass('sortable').click(function () {
                var findSortKey = function ($cell) {
                    return $cell.find('.sort-key').text().toUpperCase() + ' ' + $cell.text().toUpperCase();

                };
                var sortDirection = $(this).is('.sorted-asc') ? -1 : 1;
                var $rows = $(this).parent().parent().parent().find('tbody tr').get();
                var bob = 0;
                //loop through all the rows and find
                $.each($rows, function (index, row) {
                    row.sortKey = findSortKey($(row).children('td').eq(column));
                });

                //compare and sort the rows alphabetically or numerically
                $rows.sort(function (a, b) {
                    if (a.sortKey.indexOf('-') == -1 && (!isNaN(a.sortKey) && !isNaN(a.sortKey))) {
                        //Rough Numeracy check                          

                        if (parseInt(a.sortKey) < parseInt(b.sortKey)) {
                            return -sortDirection;
                        }
                        if (parseInt(a.sortKey) > parseInt(b.sortKey)) {
                            return sortDirection;
                        }

                    } else {
                        if (a.sortKey < b.sortKey) {
                            return -sortDirection;
                        }
                        if (a.sortKey > b.sortKey) {
                            return sortDirection;
                        }
                    }
                    return 0;
                });

                //add the rows in the correct order to the bottom of the table
                $.each($rows, function (index, row) {
                    $('tbody').append(row);
                    row.sortKey = null;
                });

                //identify the collumn sort order
                $('th').removeClass('sorted-asc sorted-desc');
                var $sortHead = $('th').filter(':nth-child(' + (column + 1) + ')');
                sortDirection == 1 ? $sortHead.addClass('sorted-asc') : $sortHead.addClass('sorted-desc');

                //identify the collum to be sorted by
                $('td').removeClass('sorted').filter(':nth-child(' + (column + 1) + ')').addClass('sorted');
            });
        });
    });
</script>
